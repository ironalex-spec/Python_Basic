                                Выходная информация
Существует огромное множество программ, 
позволяющих решить задачи в совершенно различных сферах деятельности: 
одни программы позволяют найти самый короткий маршрут, другие - посчитать прибыль и все налоги, 
третьи - определить общее количество друзей в социальных сетях. Этот список можно продолжать вечно.
Но есть одно, что объединяет эти программы - у всех у них есть результат, который мы видим на экране
после запуска кода. Это называется выходные данные программы и они изображены на схеме выше в виде блока с 
названием outputs.

Для вывода информации на экран в программе, которая использует интерфейс командной строки, 
нужно использовать встроенную функцию print. Вы уже не раз сталкивались с данной функцией в этом курсе,
настало время поговорить про нее подробнее.

Функция print является встроенной функцией языка python, которая позволяет вывести в консоль переданные ей значения.
При вызове функции print ей можно передать одно или несколько значений через запятую, все они будут выведены на экран. 
Вот взгляните на эти примеры:
    print(9)
    print(1, 2, 3, 4)
    print(1, 2, 3, 4, 5, 6, 7)
    print('Benedict', 'Timothy', 'Carlton', 'Cumberbatch')

К тому же, значения каждого вызова функции print были выведены на отдельных строках. Мы ничего дополнительно не прописывали, переносы были добавлены автоматически.
Вы можете записывать выражения внутри функции  print или вызывать другие функции. Python сперва все рассчитает, а полученный результат будет выведен на экран:
    print(2 + 3, 4 * 5, 2 + 3 * 4)
    print(max(4, 2, 5), min(4, 2, 5))
    d = 12.3456
    print(round(d, 2), round(d, 3), round(d, 4))
    
Значит, можно сделать следующий вывод относительно поведения функции print:
между значениями, переданными в функцию print, в консоли при выводе всегда по умолчанию ставится один знак пробела.
В конце своей работы print обязательно делает перенос на новую строчку.


                    Параметры функции print
Функция print имеет следующую структуру:

print(value, ..., sep=' ', end='\n')
Здесь в скобках в самом конце обратите внимание на два имени sep и end. 
Оба они называются параметрами и влияют на работу функции print.

                        Параметр sep
Параметр sep (от англ. «separator») называется разделителем . 
Он отвечает за то, что будет выводиться между значениями в пределах одной команды print.
По умолчанию разделитель равен пробелу, вот почему все значения в одном принте печатаются через пробел. Но
мы можем заменить разделитель другим значением. Для этого нужно в самом конце вызова функции print, после того
как вы указали все значения для вывода, написать имя параметра и через присваивание передать в него новое значение 
в виде строки

Вот несколько примеров
    print(1, 2, 3)
    print(1, 2, 3, 4, sep=' ')
    print(1, 2, 3, 4, 5, sep='')
    print(1, 2, 3, 4, 5, 6, sep=',')
    print(1, 2, 3, 4, 5, 6, 7, sep='*')
    print(1, 2, 3, 4, 5, 6, 7, 8, sep='###')
    print(1, 2, 3, 4, 5, 6, 7)

Если передавать в параметр sep не строковое значение, например
    print(1, 2, 3, 4, sep=123)
    то вы столкнетесь с ошибкой 
    TypeError: sep must be None or a string, not int

                        Параметр end
Параметр end  отвечает за то, что будет печататься после вывода всех значений в пределах одной команды print.
По умолчанию после вывода всех значений print делает перенос на новую строчку, поскольку принимает изначально значение \n.
Символ \n является служебным символом, обозначающим перенос строки. Более подробно о служебных символах мы погорим далее
в рамках этого курса.
    
Два следующих вызова функции print
    print(1, 2, 3)
    print(1, 2, 3, end='\n')
являются равнозначными, но во втором примере значение для параметра end передается в явном виде.

Если вы хотите добавить дополнительный перенос строки или отменить его вовсе, заменив любым символом,
просто присвойте end новое значение в виде строки. 
    print(1, 2, end='-->>')
    print(3, 4)
    print(5, 6, 7, end='-->>>\n')
    print(8, 9)
 
    1 2-->>3 4
    5 6 7-->>>
    8 9

Параметры sep и end вместе 
Можно одновременно пользоваться атрибутами sep и end . Задавать им значения можно в любом порядке, главное прописать имя параметра и присвоить значение.
    print(1, 2, 3, sep='!', end='?')
    print('Мир', 'Ни хао')
    print(5, 6, 7, 8, 9, end='END', sep='@')
    print('!')

    1!2!3?Мир Ни хао
    5@6@7@8@9END!

Что увидим на экране после запуска следующей программы?
    print('Жизнь как коробка шоколадных конфет')
    print
    print('никогда не знаешь, что тебе попадётся.')

    Ошибки не будет, но и переноса на новую строчку от пустого принта также не будет, поскольку не было вызова функции 
    print при помощи скобок ()

    Жизнь как коробка шоколадных конфет
    никогда не знаешь, что тебе попадётся
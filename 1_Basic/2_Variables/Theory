Переменные в Python. Оператор присваивания
В этом уроке мы с вами познакомимся с термином «Переменная».
    Данный термин является очень важным понятием в программировании, не важно на каком языке вы будете писать свои программы,
    в любом из них вы столкнетесь с переменными. Очень важно уметь создавать и правильно изменять переменные. 
    Моя цель в этом уроке - научить обращаться с переменными в python.


Что такое переменная?
Термин «Переменная» имеет следующее определение: 
    ​​​​​​Переменная - именованная область памяти, предназначенная для хранения значения.

Как создать переменную
Создать переменную в python очень просто — нужно придумать имя переменной (идентификатор) и присвоить ему значение при помощи оператора присваивания = (знак равенства).

    имя_переменной = значение
    Вот несколько примеров:

    a = 100  # создали переменную a и сохранили в нее значение 100
    b = 15.5  # создали переменную b и сохранили в нее значение 15.5
    name = 'Artem'  # создали переменную name и сохранили в нее значение 'Artem'
    height = 180  # создали переменную height и сохранили в нее значение 180


Когда у вас появилась переменная со значением, вы можете к ней спокойно обращаться по имени переменной, чтобы получить хранящееся в ней значение. Его можно использовать в математических операциях
    a = 100
    b = 15.5
    print(a)  # обращаемся к значению переменной "a", будет выведено 100
    print(a + b)  # складываем значения a и b
    print(pow(a, 2))  # возводим значение a в квадрат
    print(max(1, 29, a, b, 99))  # находим наибольшее значение

Переменная создается в момент первого присваивания к ней значения.
бращаться можно только к именам существующих переменных. Если переменная с таким именем на момент обращения еще не была создана, вы получите ошибку NameError.

Как посмотреть адрес переменной
Если хотите взглянуть на адрес ячейки памяти, которую занимает ваша переменная, необходимо воспользоваться функцией id.

    a = 100
    height = 180
    print(id(a))
    print(id(height))

Запуская каждый раз программу, вы будете видеть разные адреса, поскольку в памяти компьютера постоянно высвобождаются и занимаются ячейки памяти.
Вашей переменной будет предоставлена случайная свободная ячейка. Какая именно ячейка - решает python

Если вы хотите увидеть адрес ячейки в шестнадцатеричной системе счисления, как это было на картинке в начале урока, то необходимо воспользоваться функцией hex, позволяющей сделать перевод числа в систему счисления с основанием 16.
    a = 100
    height = 180
    print(hex(id(a)))
    print(hex(id(height)))

Составляющие переменной
Каждая переменная включает в себя три составляющие:
     1️⃣ Имя переменной (идентификатор);
     2️⃣ Значение переменной;
     3️⃣ Тип переменной (тип объекта, который хранится в переменной).

Имя переменной
Существует ряд правил, которых следует придерживаться при выборе имени переменной. Давайте взглянем на них:
  ❌ Имена переменных не могут содержать пробелов. Поэтому ниже представлен пример плохого имени
    name student = 'Kirill'
    Если вы хотите, чтобы имя переменной состояло из двух слов, используйте нижнее подчеркивание как соединитель
    name_student = 'Kirill'
  ❌ Имена переменных могут состоять только из букв, цифр и нижнего подчёркивания;
  ❌ Регистр символов имеет значение. Поэтому имена age и Age не равны друг другу, с точки зрения python это разные названия;
  ❌ Имя переменной не может начинаться с цифры;
  ❌ Нельзя использовать ключевые слова.

Ключевые слова представляют собой специальные зарезервированные самим языком названия, которые запрещено использовать в качестве названий переменных. Сам python запретит это делать. 
Ниже представлен список основных ключевых слов, он может расширяться по мере появлений новых версий языка python:
    False     class     finally    is    return    None    continue for    lambda    try    True
    def       from    nonlocal    while  and      del     global    not    with    as    elif    if
    or    yield    assert    else    import    pass    break except    in    raise

Нужно стараться давать переменным осмысленные имена на английском языке. Когда в вашем коде будет более 3 переменных и все они будут под буквами a, b, c, d и т.д., 
вы можете запутаться и не увидеть явную ошибку. Если вам нужно посчитать сумму, выберите имя для переменной total. Для переменной, хранящей количество, идеально подойдет название count.

При объявлении переменной создается объект со своим значением, затем проверяется, есть ли уже созданная переменная с этим именем. Если такая переменная есть, то ссылка на прошлый объект заменяется новой ссылкой на другой объект в памяти. Если такой переменной ранее не было, 
то просто присваивается ссылка на данный объект. Вот взгляните на данный пример:
    x = 10
    y = 'hello'
    y = 'bye'
    z = y
В итоге получили, что переменные y и z ссылаются на один и тот же объект.


Языки программирования, в которых можно в одну переменную сохранять объекты с различным типом данных, называют языками с динамической типизацией. Противоположные языки, где за переменной привязан тип данных, называют языками со статической типизацией.

При помощи функции type вы можете узнать тип данных объекта, на который указывает переменная. 
    a = 10  # создаем переменную a
    print(a, type(a))  # 10 <class 'int'>
    a = 'hello'  # изменяем значение переменной "a"
    print(a, type(a))  # hello <class 'str'>
    a = [1, 2, 3]  # изменяем значение переменной "a"
    print(a, type(a))  # [1, 2, 3] <class 'list'>
Тип данных определяется не по переменной, а по значению, на которое ссылается данная переменная.

Разом определяется уже три переменных
    q, r, t = 7, 3, 5
    print(q)  # 7
    print(r)  # 3
    print(t)  # 5

Если указать неодинаковое количество значений или переменных, возникнет ошибка ValueError. Ниже показаны два примера
    q, r, t = 7, 3
    # ValueError: not enough values to unpack (expected 3, got 2)
                                        Функция input
Функция input позволяет получить информацию, которую пользователь вводит с клавиатуры.
имя_переменной = input()

Ниже представлена программа, которая хочет, чтобы вы ввели ей свое имя. Далее она поздоровается с вами:
    print('Бу, испугался? Не бойся! Я друг')
    print('Скажи, как тебя зовут?')
    name = input()
    print('Рад познакомиться,', name)

Главной особенностью функции input является то, что она получает все введенные данные в качестве текста.
Следовательно, все, что вы введете, сохранится в переменной как строка.

Преобразование типа данных (на английском «type casting») является базовой операцией практически в любом языке программирования, 
позволяющей выполнить преобразование из одного типа данных в другой.

На данный момент нам известные следующие типы данных:

     ☑️ int, представляющий целые числа;

     ☑️ float, представляющий вещественные числа;

     ☑️ str, представляющий строки.

Мы можем целое число преобразовать в вещественное или в строку при помощи функций float() и str() соответственно
    int_number = 100
    print(int_number, type(int_number))

    # преобразование
    float_num = float(int_number)
    print(float_num, type(float_num))

    str_num = str(int_number)
    print(str_num, type(str_num))

Вещественное число можно преобразовать в целое или в строку при помощи функций int() и str() соответственно
    float_num = 7.15
    print(float_num, type(float_num))

    # преобразование
    int_number = int(float_num)
    print(int_number, type(int_number))

    str_num = str(float_num)
    print(str_num, type(str_num))

Во время преобразования вещественного числа в целое будет отброшена дробная часть числа. Во всех примерах ниже результатом преобразования будет целое число 15.
    print(int(15.01))
    print(int(15.51))
    print(int(15.91))
    print(int(15.9999))

Строку можно преобразовать в целое или вещественное число, в случае если она состоит из символов цифр. Для таких преобразований понадобятся функции int() и float() соответственно.
    str_value ='78'
    print(str_value, type(str_value))

    # преобразование
    int_number = int(str_value)
    print(int_number, type(int_number))

    float_num = float(str_value)
    print(float_num, type(float_num))

Строку, целиком состоящую из цифр и содержащую знак точки, можно преобразовать к вещественному типу
    str_value = '78.15'
    print(str_value, type(str_value))

    float_num = float(str_value)
    print(float_num, type(float_num))

поскольку возникнет исключение

    ValueError: invalid literal for int() with base 10: '78.15'

    Python не понимает, как интерпретировать знак точки, он не может преобразовать его к цифре. По этой же причине возникнет ошибка ValueError, 
    если попытаться преобразовать строку не из цифр к целому или вещественному значению. Вот пример такой

    print(float('Привет'))
    print(int('Привет'))
    При запуске возникнет исключение

    ValueError: invalid literal for int() with base 10: 'Привет'

Если вы хотите преобразовать строку, хранящую вещественное число, вам необходимо выполнить два преобразования по следующей схеме

    str -> float -> int
    Вот как будет выглядеть код

    str_value = '78.15'
    print(str_value, type(str_value))

    int_number = int(float(str_value))
    print(int_number, type(int_number))





                                        Преобразование во время считывания информации

Теперь, когда вы научились преобразовывать значение из одного типа в другой, разберем, как правильно считывать числовые значения от пользователя.

Если вам потребуется прочитать значение в качестве целого числа, вы можете сделать так
    переменная = input()
    число = int(переменная)

Тут мы сперва считываем информацию в переменную в качестве текста, а затем отдельной операцией выполняем преобразование к типу int. 
Но данный способ занимает две строчки кода, и мы создаем ненужную переменную. 
Лучше заменить все одной строкой, используя вложенный вызов функций

    число = int(input())

В этом примере сперва делается вызов функции внутри, а это input(). 
Она получает данные от пользователя, которые поступают на вход функции int, которая преобразует их в целое число.
Удобно, модно, молодежно.
    >>> d=int(input())
    123
    >>> type(d)
    class 'int'
    >>> d+2
    125

По аналогии вы можете считать информацию в виде вещественного числа, заменив внешний вызов функции int на вызов функции float.
Вот так:
    вещественное_число = float(input())
    Тогда то, что вы введете, будет преобразовано к типу float

    >>> q=float(input())
    4.5
    >>> q
    4.5
    >>> type(q)
    class 'float'

Помните, что не все строковые значения могут быть преобразованы к числам. В случае, если во введенной строке будут присутствовать знаки препинания (кроме точки) или буквы, возникнет ошибка ValueError
    d=int(input())
    15sdf4
    Traceback (most recent call last):
        d=int(input())
    ValueError: invalid literal for int() with base 10: '15sdf4'





                                                Подсказка ввода
У функции input есть необязательный параметр prompt – это подсказка пользователю перед вводом. При помощи нее вы можете сообщить пользователю, что от него требуется, ведь наши пользователи не ясновидящие, они не понимают, что нужно вводить. 
Вот смотрите, как выглядит программа без подсказок
    a = int(input())
    b = int(input())
    print("Произведение чисел", a, b, "равно", a * b)

    и вот пример ее работы
    5
    6
    Произведение чисел 5 6 равно 30

А вот уже программа с подсказками

    a = int(input('Введите первое число: '))
    b = int(input('Введите второе число: '))
    print("Произведение чисел", a, b, "равно", a * b)

    и вот как отображается информация о подсказках

    Введите первое число:  5
    Введите второе число:  6
    Произведение чисел 5 6 равно 30



                                            Остановка в программе
Функцию input() можно использовать для остановки программы. Пауза будет длиться до тех пор, пока пользователь не нажмет клавишу «Enter». 
Сам введенный текст при этом не будет нигде сохранен.
Вот взгляните на программу ниже. В ней используются 3 вызова функции input: два из них с подсказкой, один - без. 
Все они заставляют замереть программу до тех пор, пока пользователь не нажмет «Enter». 
Нажатие всех остальных клавиш игнорируются.
        print('Привет')
        input('Пауза № 1, нажми Enter и увидишь следующий print')
        print('Меня зовут Артём')
        input()
        print('Нравится курс?')
        input('Пауза № 3')
        print('Для чего изучаешь Python? Делись в комментариях')
                                    



                                    
                                        Итоги
В этом уроке мы узнали, как работает функция input, и изучили три варианта ее использования, а именно:
   ✅ чтобы ввести строку и сохранить ее в переменную, вам необходимо пользоваться таким шаблоном
        переменная = input()
   ✅ чтобы ввести целое число и сохранить его в переменную, вам необходимо пользоваться таким шаблоном
        переменная = int(input())
   ✅ чтобы ввести вещественное число и сохранить его в переменную, вам необходимо пользоваться таким шаблоном
        переменная = float(input())


                                                    Откуда взялись эти правила?
Все эти правила пришли из стандарта PEP8. Это объемный документ, описывающий свод правил оформления кода на языке Python. 
Он, к примеру, описывает как нужно называть переменные, сколько отступов и пробелов ставить в разных конструкциях языка и т.д.
Перечислять все правила не имеет смысла, просто обращайте внимание на эти лампочки, они вам подскажут, 
что нужно исправить в коде, чтобы он соответствовал стандарту PEP8.
Когда мы с вами перейдем с IDLE на pyCharm, я покажу как нажатием пары клавиш можно отформатировать свой код, чтобы он стал соответствовать
стандарту PEP8
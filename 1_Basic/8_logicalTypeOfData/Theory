Название «булев» происходит от имени английского математика и логика
Джорджа Буля, который занимался вопросами математической логики в середине XIX века‍.

Boolean (логический тип данных) - это примитивный тип данных в информатике,
который может принимать только два возможных значения: истинность (true) и ложность (false).

В большинстве языков программирования есть поддержка работы с булевым типом данных, и python 
не является исключением. В python логический тип данных реализован под названием bool. В других 
языках программирования вы можете встретить другие названия для данного типа.

Встроенный тип данных bool в языке python может принимать только одно из двух значений:
      ✔️   True (Истина);
      ✔️   False (Ложь).
Обязательно нужно писать данные значения с заглавной буквы.

При любом сравнении участвуют всегда два операнда: левый операнд 
(стоит слева от операции сравнения) и правый операнд. Между ними ставится оператор сравнения.

В python существуют следующие операторы сравнения:

      1️⃣  Равно, обозначается так ==. 
       Проверяет, равны ли два значения. Возвращает True, если оба операнда равны, иначе False.
      2️⃣  Не равно, обозначается так !=. 
       Проверяет, не равны ли два значения. Возвращает True, если операнды не равны друг другу, иначе False.
      3️⃣  Больше, обозначается так >. 
       Проверяет, больше ли значение первого операнда значения второго. Возвращает True, если значение первого операнда больше чем у второго, иначе False.
      4️⃣  Меньше, обозначается так <. 
       Проверяет, меньше ли значение первого операнда значения второго. Возвращает True, если значение первого операнда меньше чем у второго, иначе False.
      5️⃣  Больше или равно, обозначается так >=. 
       Проверяет, больше ли первое значение второго или они равны. Возвращает True, если первый операнд больше второго или равен ему, иначе False.
      6️⃣  Меньше или равно, обозначается так <=. 
       Проверяет, меньше ли первое значение второго или они равны. Возвращает True, если первый операнд меньше второго или равен ему, иначе False.

        a = 5
        b = 7
        c = 5

        print(a, '==', b, a == b)
        print(a, '!=', b, a != b)
        print(a, '==', c, a == c)
        print(a, '!=', c, a != c)

        print('------------')
        print(a, '>', b, a > b)
        print(a, '<', b, a < b)
        print(a, '>', c, a > c)
        print(a, '<', c, a < c)

        print('------------')
        print(a, '>=', b, a >= b)
        print(a, '<=', b, a <= b)
        print(a, '>=', c, a >= c)
        print(a, '<=', c, a <= c)

        Out
        5 == 7 False
        5 != 7 True
        5 == 5 True
        5 != 5 False
        ------------
        5 > 7 False
        5 < 7 True
        5 > 5 False
        5 < 5 False
        ------------
        5 >= 7 False
        5 <= 7 True
        5 >= 5 True
        5 <= 5 True



                                Конъюнкция
Конъюнкция (логическое И) - это логическая операция, позволяющая объединить 
несколько условий в одно, результат которого будет истинным только тогда, когда 
все входящие в конъюнкцию условия истинны.

В python конъюнкция реализуется при помощи оператора and. Вы можете объединять 
два и более условий в конъюнкцию, ставя между условиями оператор and. Представим, 
что у нас есть два условия A и B, каждое из них может принимать значение True и False. 
В таблице ниже показаны все возможные комбинации значений условий A и B, и также в
последней колонке показан результат конъюнкции A и B для таких значений:

    num = int(input())
    print(num % 2 == 0 and num > 0)


                            Дизъюнкция
Дизъюнкция (логическое ИЛИ) - это логическая операция, позволяющая объединить несколько
условий в одно, результат которого будет истинным, когда хотя бы одно входящее в дизъюнкцию условие истинно.

    num = int(input())
    print(num < 10 or num > 30)

                            Инверсия
Инверсия (логическое отрицание, обозначается как НЕ) - это логическая операция, которая меняет 
значение условия на противоположное.
В python инверсия реализуется при помощи оператора not. Инверсия работает только с одним условием, 
поэтому в таблице истинности будет только два варианта значений.

    num = int(input())
    print(not num % 2 == 0)


                            Приоритет логических операций
При помощи операторов and , or и not мы можем строить сложные условия. Только взгляните на данный пример
    width = 10
    height = 200
    height > 100 and not (width < 5 or width > 20) and height < 300

Для того, чтобы уметь определять результат такого условия, вам необходимо знать, в каком порядке выполняются
логические операции. Если нет скобок в условии, то порядок приоритетов от высокого к низкому выглядит следующим образом:
    1️⃣ not (логическое отрицание, инверсия);
    2️⃣ and (логическое И);
    3️⃣ or (логическое ИЛИ).
Если скобки присутствуют, значит, первым делом выполняются операции внутри скобок.


                            Преобразование в логический тип данных
Мы до этого момента были знакомы с тремя типами данных: int, float и str. Также мы знаем о существовании 
такой операции, как преобразование типа. Логично будет предположить, что можно преобразовывать из int, 
float и str в тип bool и наоборот. Отчасти это предположение верно, и сейчас я вам расскажу, какие варианты
преобразования типов допустимы.

    Из int/float в bool
    Любое число в python может быть преобразовано в логическое значение при помощи одноименной функции bool. Во время преобразования используются следующие правила:
        ➖  Значение 0 интерпретируется как False;
        ➖  Все остальные значения (положительные и отрицательные) интерпретируются как True.

        print(bool(0))  # False
        print(bool(1))  # True
        print(bool(1.0))  # True
        print(bool(-42))  # True
        print(bool(345.3))  # True
        print(bool(-123.35))  # True

    Из bool в int
    В математической логике (науке о логических высказываниях) принято обозначать значение 
    True единицей, а False - нулем. Точно такие же правила будут и в python:
        ➖  значение False преобразуется в 0.
        ➖  значение True преобразуется в 1.

        print(int(True))   # 1
        print(int(False))  # 0

    Из str в bool
    юбую строку можно преобразовать к логическому значению. Во время преобразования используются следующие правила:
        ➖  Пустая строка ("") преобразуется в False;
        ➖  Любая непустая строка (включая строки с пробелами) преобразуется в True.

        print(bool(""))       # False
        print(bool("True"))   # True
        print(bool("False"))  # True (даже строка "False" считается True, так как она не пустая)
        print(bool("0"))      # True (не пустая строка)
        print(bool(" "))      # True (строка с пробелами)
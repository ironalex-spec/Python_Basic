                Списки и операции над ними
В этом уроке мы познакомимся с новым типом данных, который называется список.

    Что такое список
Список представляют собой упорядоченную коллекции элементов. Он позволяют хранить в одном месте взаимосвязанные 
данные разных типов.


В школе каждый из вас по разным предметам получает множество оценок. Для того чтобы не создавать для 
каждой оценки свою отдельную переменную, вы можете создать один большой список, в который будете заносить свои оценки. 
Для примера создадим список из 5 элементов и сохраним его в переменную marks.
    marks = [4, 5, 4, 3, 5]
Если мы, например, хотим учитывать температуру каждого дня в июле, то мы можем создавать отдельные переменные, 
в каждой из которых будет сохраняться температура каждого дня, то есть, например, в первый день было 20, во второй 
день температура была 24 и т.д. Но для этого вам понадобится 31 день, т.е. 31 переменная.
    t1 = 20
    t2 = 24
​​​    ​​​​t3 = 23
Но вы можете просто создать переменную температура июля, в которую будет записан список из 31 значения.
    t_july = [20, 24, 23, 20, 24, 27]
Из этих примеров вы уже видите, что список создаётся при помощи квадратных скобок.

Списки хороши тем, что внутри них вы можете хранить значение разных типов. Вы спокойно можете создать список, в котором 
могут храниться различные значения, в том числе и другие списки.
    a = [True, 43, "text", 32.12, [2, 3, 4]]
Чтобы создать пустой список Вы должны просто открыть скобочку и закрыть скобочку:
    b = []
По-английски список обозначается словом list и также с помощью функции type вы можете проверить хранится ли в 
переменной этот тип данных
    b = []
    print(type(b))

    out
    <class 'list'>


                Доступные операции над списками
Теперь давайте поговорим какие операции можно cо списками делать.

Первая операция и очень полезная - это нахождение длины списка. Это делается при помощи функции len. 
В скобках вы указываете список. Обратите внимание, что вложенные списки будут считаться за 1 элемент.
        print(len([]))  #0
        print(len([1, 2, 3, 4])) #4
        print(len([1, 2, 3, [1, 2, 3]])) #4

        
        Сложение (конкатенация) списков
Списки вы можете складывать друг с другом или сцеплять. За счёт этого вы можете расширять свой список. 
        a = [1, 2, 3]
        b = [4, 5, 6]
        print(a + b) #[1, 2, 3, 4, 5, 6]
        print(a + [4]) #[1, 2, 3, 4]
        a = ['hi'] + a
        print(a) #['hi', 1, 2, 3]
        a = a + b
        print(a) #['hi', 1, 2, 3, 4, 5, 6]


        Дублирование списка
​​Списки можно дублировать.  Умножать список на вещественное число вы не сможете - в этом случае получите ошибку.
    a = [0] * 5
    print(a) #[0, 0, 0, 0, 0]

    b = [1, 2, 3] * 3 #[1, 2, 3, 1, 2, 3, 1, 2, 3]
    print(b)

    Также вы не можете список складывать с числом вот таким образом:
    [1,2,3] + 4



    Проверка вхождения элемента в список
Следующая операция - это проверка вхождения. Мы встречали её уже со строками. Это делается с помощью союза in и python сообщит, 
что это правда(True), если найдёт такой элемент. Если вы будете искать элемент, которого нет в этом списке, то получите ложь(False). 
Также поиск осуществляется целиком по элементу - если вы будете искать лишь часть этого элемента(например, строку), то python ее 
не найдет.

    a = [2, 5, 8, 9]
    print(5 in a) #True
    print(15 in a) #False

    Нахождение min и max
Вы также можете применять следующие операции: находить максимальное и минимальное значение в списке, сумму всех элементов этого 
списка.
    a = [2, 5, 8, 9]
    print(max(a))  # Максимальное значение
    print(min(a))  # Минимальное значение
    print(sum(a))  # Сумма всех элементов

    Сортировка
Также вы можете отсортировать свой список с помощью функции sorted. По умолчанию она отсортирует по возрастанию. При этом сам 
список не меняется. Если вы хотите отсортировать по убыванию, то вы должны будете дописать слово reverse и присвоить ему значение 
True.

    b = [6, 5, 2, 9]
    print(sorted(b))  
    print(sorted(b, reverse=True)) 
    # сам список b не изменился
    print(b)  
    # теперь изменим b
    b = sorted(b)  
    print(b)  


!!!!В случае, если в вашем списке будут находиться не только числа, но и другие объекты, то мы получим ошибку. При использовании функций 
максимум, минимум, сумма и сортировка  вы должны быть уверены, что в списке хранятся одинаковые типы.!!!

            Сравнение списков
Также списки можно сравнивать между собой. Списки, как и строки, сравниваются по элементам, то есть берутся первые элементы и если 
первый элемент больше второго, то мы сразу получаем ответ. Списки будут полностью совпадать только в случае, если в них находятся 
одинаковые элементы и длина списков одинаковая. 

    a = [2, 5, 8, 99999]
    b = [2, 5, 9]
    print(a > b) # False

    a = [2, 5, 9]
    b = [2, 5, 9]
    print(a == b) #True

        Суммирование элементов списка
Чтобы найти сумму всех элементов списка, необходимо воспользоваться функцией sum. 
Передаете ей список и получаете результат
    a = [2, 5, 8, 9]
print(sum(a))  # Сумма всех элементов
Только будьте аккуратны: операция нахождения суммы списка выполнится успешно только в том случае, 
если все элементы списка будут числами. Если среди элементов будет строка, то возникнет ошибка
    TypeError: unsupported operand type(s) for +: 'int' and 'str'
Вы можете легко найти среднее арифметическое списка. Для этого вам необходимо будет сумму всех элементов разделить 
на количество этих элементов.
    a = [2, 5, 9, 8]
    print(sum(a) / len(a)) #6.0



Нам понадобится команда input(), но немного в преобразованном виде, 
потому что если просто использовать метод и вводить эти числа, то они сохранятся в нашей переменной в виде строки.

Мы уже с вами знаем, что есть команда split(), которая бьёт строку по пробелам и результатом будет список, но обратите внимание, 
что здесь сохранятся именно строки, а не числа, но по многим задачам нам нужно работать именно с числами.

Мы можем сразу результат input() "сплитить" по пробелам. Мы можем вводить неограниченное количество чисел, 
главное что они вводятся  через пробел. Конечно мы можем использовать преобразование в int в дальнейшем при 
использовании элементов, но это неудобно, потому что список у нас может быть очень длинный.

В python существует функция map(). О ней подробно мы будем говорить чуть позже - ей будет посвящено отдельное видео. 

Она делает следующее - преобразовывает в целое число всё, что вы введёте и разобьете по пробелам. Записывается она таким образом:
    map(int, input().split())
Но нам нужно будет превратить её в список, так как изначально результатом будет объект.
    list(map(int, input().split()))
Аналогично можно приводить и к типу float:
    list(map(float, input().split()))
Не забывайте сохранять списки в переменных. Вот пример ниже, вы можете ввести через пробел сколько угодно целых чисел, все 
они сохранятся в списке
    b = list(map(int, input('Введите значения: ').split()))
    print(f'Вот наш список: {b}')

    out
    Введите значения:  1 2 3
    Вот наш список: [1, 2, 3]
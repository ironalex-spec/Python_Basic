                                    Методы split и join
В этом уроке мы отдельно поговорим о двух методах, которые помогают преобразовать строку в список и наоборот. 
Называются они split и join. Но сперва поговорим о проблеме преобразования типов.



Преобразование типов
    Мы с вами уже знаем, что можно преобразовывать из одного типа данных в другой. 
    Напоминаю схему, которая демонстрирует варианты преобразований:
    float()
    str()
    int()


    Но в этом разделе мы изучили два новых типа данных: строки и списки. Эти два типа данных отличаются от ранее 
изученных тем, что они оба являются коллекциями, и, следовательно, состоят из нескольких элементов. Нам надо обсудить, 
как можно преобразовать строку в список и наоборот.

Логично предположить, что можно воспользоваться функциями str и list для преобразования. 
Да, воспользоваться можно, но результат будет интересным. Строка при таком преобразовании разобьется на отдельные символы

    s = 'Иванов Иван'
    print(list(s))  # ['И', 'в', 'а', 'н', 'о', 'в', ' ', 'И', 'в', 'а', 'н']

А если попробовать сделать обратное преобразование, то и вовсе ничего не получится

    letters = ['И', 'в', 'а', 'н', 'о', 'в', ' ', 'И', 'в', 'а', 'н']
    print(str(letters))

поскольку результатом операции 
    str(letters)

будет такая строка
    '['И', 'в', 'а', 'н', 'о', 'в', ' ', 'И', 'в', 'а', 'н']'

Значит, обычными функциями str и list нам не справиться с этой задачей. 
Тут нужно воспользоваться специальными методами split и join.




                            Метод split
Глагол split можно перевести как «расколоть», «расщепить», но наиболее подходящий вариант перевода для нас это  «разбивать». 
Он позволяет разбить строку на несколько маленьких строк и создать из них один список.

Метод .split является методом строки и имеет следующий шаблон вызова:
    S.split(sep=None, maxsplit=-1)

Метод .split выполняет разбиение исходной строки S на подстроки по разделителю sep и возвращает их в виде списка. По умолчанию 
разделитель sep равен пробелу. Вот, взгляните на данный пример:

name = 'Иванов Иван Иванович'
print(name.split())  # ['Иванов', 'Иван', 'Иванович']

    fruits = 'Apple Banana Cherry Orange'
    fruits = fruits.split()

print(fruits)  # ['Apple', 'Banana', 'Cherry', 'Orange']
    print('a b C d e'.split())  # ['a', 'b', 'C', 'd', 'e']




    Параметр sep
В методе split имеется необязательный параметр sep, который отвечает за знак разделителя. 
По умолчанию он равен пробелу, но вы можете задать ему другое значение. В примере ниже в строке guests имена 
разделены запятыми. Следовательно, чтобы получить каждое имя отдельно нам нужно разбить данную строку по символу , 

    guests = "Алиса,Боб,Чарли,Денис,Ева"

    # Разделяем строку на отдельные имена
    guest_list = guests.split(',')
    print(guest_list)  # ['Алиса', 'Боб', 'Чарли', 'Денис', 'Ева']


Когда параметр sep будет задан, то следующие друг за другом разделители не воспринимаются как один и считаются разделителями 
пустых строк. В примере ниже первый вызов метода split воспринимает 3 стоящих пробела между цифрами как один, поэтому в итоговом 
списке нет никаких дополнительных элементов. 

Второй же вызов происходит не от дефолтного разделителя запятой, поэтому учитывается каждый знак , 
    print('1   2   3   4   5'.split())  # ['1', '2', '3', '4', '5']
    print('1,,2,,3,,4,,5'.split(','))  # ['1', '', '2', '', '3', '', '4', '', '5']

    print('1, 2, 3, 4, 5'.split(', '))  # ['1', '2', '3', '4', '5']
    print('a->b->C->->d'.split('->'))  # ['a', 'b', 'C', '', 'd']
    print('1      4      5'.split())  # ['1', '4', '5']
    print('   a  b   c   '.split())  # ['a', 'b', 'c']
    print('    '.split())  # []
    print('www'.split('w'))  # ['', '', '', '']



    Параметр maxsplit 
Мы можем использовать параметр maxsplit метода .split для ограничения количества разбиений строки. 
    fruits = 'Apple#Banana#Cherry#Orange'

    # без ограничений
    print(fruits.split('#'))  # ['Apple', 'Banana', 'Cherry', 'Orange']

    # лимит в одно разбиение
    print(fruits.split('#', 1))  # ['Apple', 'Banana#Cherry#Orange']

    # лимит в два разбиения
    print(fruits.split('#', 2))  # ['Apple', 'Banana', 'Cherry#Orange']

    # запрет разбиений
    print(fruits.split('#', 0))  # ['Apple#Banana#Cherry#Orange']



Метод .split используется очень часто, вы обязаны его знать. При помощи него можно не только преобразовать строку в список, 
но и узнать сколько отдельных слов было в исходной строке. Для этого достаточно посчитать длину списка после разбиения:
    print(len(S.split()))


    notes = 'до ре ми фа соль ля си'
    print(notes.split(', ', 2)) # ['до ре ми фа соль ля си']

    notes = 'до, ре, ми, фа, соль, ля, си'
    print(notes.split(', ', 2)) # ['до', 'ре', 'ми, фа, соль, ля, си']


                                                    Метод join

Глагол join переводится как «объединять», в принципе, в этом и заключается суть метода .join: он соединяет список строк 
вновь в одно целое.

Метод .join  является методом строки и имеет следующий шаблон вызова:
    строка_соединитель.join(iterable)

    print(' '.join(['Иванов', 'Иван', 'Иванович']))  # Иванов Иван Иванович
    print('#'.join(['Apple', 'Banana', 'Cherry']))  # Apple#Banana#Cherry
    print(''.join(['Алиса', 'Боб', 'Чарли', 'Денис', 'Ева']))  # АлисаБобЧарлиДенисЕва
    print(','.join(['Алиса', 'Боб', 'Чарли', 'Денис', 'Ева']))  # Алиса,Боб,Чарли,Денис,Ева
    print('->'.join(['Алиса', 'Боб', 'Денис', 'Ева']))  # Алиса->Боб->Денис->Ева

    Он принимает на вход итерируемую последовательность. 
Мы еще не проходили эту тему, поэтому можете под итерируемой последовательностью понимать список или строку. 

    Значит, метод .join объединяет элементы переданного списка или строки с помощью «соединителя».  Вначале вы пишете 
строку-соединитель, затем ставите точку и вызываете метод  .join. В скобках указываете переменную, в которой у вас 
хранится список или другая строка.

Вот что будет, если передавать строку:

    print('!'.join('Алиса'))  # А!л!и!с!а
    print('???'.join('1 2 3'))  # 1??? ???2??? ???3


!!!!!!Перед первым элементом и после последнего строка-разделитель проставлена не будет.!!!!!!!
!!!Метод .join используется очень часто, его вы обязаны знать. При помощи него можно преобразовать список к строке.

    Но метод join умеет объединять в одну строку только строковые элементы. Это значит, что нельзя в него передавать коллекцию не из строк, иначе возникнет исключение
    TypeError: sequence item 0: expected str instance, int found
    В примере ниже передаем в вызов метода join список из чисел и получаем ошибку TypeError
        print(','.join([1, 2, 3]))  # TypeError


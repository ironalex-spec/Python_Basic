                Определение строки

Строка - это неизменяемая упорядоченная последовательность символов,
которая используются для хранения текстовой информации.

В качестве символов в строке могут использоваться буквы, цифры, знаки 
препинания и специальные символы. Причем, так как в Python используется стандарт Unicode, 
то в качестве букв могут использоваться буквы практически любого алфавита письменного языка мира.

Создание строки.
В Python есть несколько способов для создания строки. Давайте разберем каждый из них.

1️⃣ Использование одинарных апострофов. Первый апостроф открывает строку, затем следует сам
текст, и вторым апострофом вы закрываете строку. Вот несколько примеров создания строки при помощи одинарных апострофов:
    print('Моя первая строка')
    print('Это строка с цифрами: 0123456789')
    print('Тут знаки препинания: !?.,:;')
    print('Английский: hello')
    print('Китайский: 你好')

2️⃣ Использование одинарных кавычек. Первой кавычкой вы открываете строку, пишете текст и закрываете строку кавычками.

    Если вы откроете строку апострофом, а закроете кавычкой, то вы получите ошибку:
    Если вы вообще не укажете никаких кавычек, то в данном случае вы получите ошибку имени.

3️⃣ Использование тройных одинарных апострофов

    '''Еще одна моя строка'''
    или кавычек

    """Еще одна моя строка"""
    Такой способ необходимо применять для создания многострочных строк.

    lyrics = '''Крошка моя, я по тебе скучаю
    Я от тебя письма не получаю
    Ты далеко и даже не скучала
    Но я вернусь, вернусь, чтоб ты узнала'''

    print(lyrics)

В консоли вы видите необычные знаки, расположенные между словами. Символ \n является служебным символом и
обозначает перенос на новую строку.
Несмотря на то, что он состоит из двух знаков: обратного слеша \ и буквы n, python воспринимает его как один символ.

Операции над строками
Теперь разберем базовые операции, которые поддерживают строки



                                    Конкатенация
Конкатенация строк – это базовая операция над строками, которая позволяет выполнить объединение нескольких строк в одну.
Конкатенация выполняется при помощи оператора сложения +, поэтому данную операцию еще называют сложением или сцеплением 
строк. Вы пишете первую строку, затем ставите знак сложения +, после этого пишете вторую строку:
    
Строки в данном случае просто сцепляются. Причем к первой строке "приклеивается" вторая. 
Если их поменять местами, то и ответ мы получим другой. 
Также мы можем использовать конкатенацию и с переменными:

Строки можно складывать с другими строками, но нельзя с числовыми типами - это приведет к ошибке TypeError:


                                Дублирование строки
Дублирование строки - базовая операция, позволяющая продублировать строку определенное количество раз.
Выполняется данная операция путем умножения строки на целое число.  Результатом выполнения будет новая 
строка, которая повторится заданное число раз:
'a' * 5
'aaaaa'

Если умножить на 0 или отрицательное число, результатом будет пустая строка:
'a' * -1
''
Обратите внимание, что вы не можете умножать на вещественные числа - вы получите ошибку TypeError:
 
                            Нахождение длины
Нахождение длины - базовая операция, позволяющая определить, из какого количество символов состоит строка.
Для нахождения длины используется встроенная функция  len. Название len является сокращением от английского 
слова «length», обозначающего длину. Воспользоваться данной функцией очень легко:  пишете ее название len 
и передаете ей внутрь строку. Вы можете передать строку напрямую или через переменную:
>>len('abc')
3

                        Проверка вхождения
​​​​​Проверка вхождения - базовая операция, которая позволяет проверить, есть ли какой-либо символ в нашей строке.
Также можно проверить наличие подстроки (ряд символов, стоящих рядом).
Реализуется проверка вхождения при помощи оператора in, который проверяет, есть ли какая-либо подстрока в
нашей строке. Вы указываете сперва строку поиска , затем оператор in и затем строку. Вот формат использования:
    строка_поиска in строка

Результатом операции будет булево значение: True, если имеется подстрока, False - в противном случае.
Например, в нашей переменной s сейчас содержится слово Hello. Мы можем проверить, содержатся ли в ней символ l или подстрока He .

s = 'Hello'
'l' in s
True

Обратите внимание, что порядок символов и регистр важен. Поэтому подстрока «He» нашлась в строке Hello», а подстрока «he» - нет.
Если хотите выполнить обратную проверку, достаточно добавить оператор not по следующему синтаксису
    строка_поиска not in строка
Получается связка операторов not in проверяет на отсутствие подстроки в строке. Если подстрока отсутствует, то результат будет True, иначе False.
s = 'Hello'
'l' not in s
False


                        Сравнение строк
Строки можно сравнивать между собой. Строки будут равны, если их длина и 
символы полностью будут совпадать. Регистр букв при данной операции также важен: 

Строки можно сравнивать также с помощью операторов > и <. Python сравнивает строки 
посимвольно, поэтому сперва будут сравниваться первые символы, если они равны, тогда 
переходим к сравнению вторых символов и т.д. Чем дальше в алфавите буква - тем больше её значение.
'a' > 'bcd'
False
'a' > 'A'
True

Но если сказать более правильно, то сравниваются коды этих символов. 
Числовое значение каждого символа вы можете получить с помощью функции ord()

ord('a')
97
ard('A')
65

Коды знать необязательно. Вы всегда можете загуглить их - ascii code table или коды ascii
Если строки начинаются одинаково, но имеют разную длину, то больше будет та строка, которая длиннее: 
'abcd' > 'abc'
True
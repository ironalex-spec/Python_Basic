                                Форматирование строк. Метод format
В этом уроке мы поговорим с вами о форматировании строк и узнаем, как реализовать форматирование при помощи метода format.

Форматирование — это способ создания строки, которая может состоять из неизменяющейся части текста и изменяющейся, 
куда подставляются значения из переменных, выражений и т.д. 
Следовательно, в строке форматирования какая-то часть будет динамически меняться за счет входных значений.

Форматирование можно реализовать несколькими способами. В этом уроке мы рассмотрим реализацию форматирования при помощи:
     ➕ конкатенации;
     ➕ метода format.


                            Форматирование при помощи конкатенации
Представьте, вы хотите создать следующую строку
Дорогой <Имя> <Фамилия>, баланс вашего лицевого счёта составляет <Баланс> руб.

Обратите внимание, что каждый элемент конкатенации представляет собой именно строку. Поэтому в примере выше мы обернули 
значение 32.56 в апострофы. Теперь надо подставить значение имени, фамилии и баланса из переменных.  
Вот здесь нужно быть аккуратнее с типами данных, потому что если написать код так:

    name = 'Семён'
    surname = 'Семёнов'
    balance = 32.56

    text = """Дорогой """ + name + " " + surname + """, 
    баланс Вашего лицевого счёта составляет """ + balance + """ руб."""
    print(text)

    то возникнет ошибка

TypeError: can only concatenate str (not "float") to str

    Как вы уже догадались, это произошло потому, что переменная balance является типом float и не была преобразована к строке. 
    Используем функцию str для преобразования вещественного числа, и тогда все заработает.
    name = 'Семён'
    surname = 'Семёнов'
    balance = 32.56

    text = """Дорогой """ + name + " " + surname + """, 
    баланс Вашего лицевого счёта составляет """ + str(balance) + """ руб."""

    print(text)

Конкатенация, как способ форматирования строки, имеет очень много недостатков: нужно ставить очень много апострофов или кавычек 
для открытия и закрытия каждой строки, следить за пробелами и т.д. Поэтому был создан более удобный способ решить 
задачу форматирования строк - метод format.





                                    Метод format
Format представляет собой метод строки, поэтому его нужно вызывать только от объектов строк через точку.
Воспользоваться данным методом очень легко. Вам первым делом нужно создать шаблонную строку и выделить в ней места, 
на которые нужно подставить данные. Каждое такое место вы нумеруете по порядку, начиная с 0. Каждый номер обязательно 
указывается в фигурных скобках. Вот так

Дорогой {0} {1}, баланс Вашего лицевого счёта составляет {2} руб.
Данная строка будет нашим шаблоном. От нее необходимо будет вызвать метод format и передать в него все значения, которые 
вы хотите подставить в строку.
    name = 'Семён'
    surname = 'Семёнов'
    balance = 32.56

    text = """Дорогой {0} {1}, 
    баланс Вашего лицевого счёта составляет {2} руб.""".format(name, surname, balance)

    print(text)


Порядок перечисления переменных в методе format имеет значение. 
От порядка переменных зависит, какие значения пойдут на какие места.

Обратите внимание, что при использовании метода format мы не получили ошибку 
    TypeError: can only concatenate str (not "float") to str
и нам не потребовалось преобразовывать переменную balance к строке. Метод  format автоматически преобразовывает 
каждое переданное значение к строке.


В примерах выше мы подставляли значения переменных, используя позиции. Но есть второй вариант использования метода 
format - указывать имена. Теперь вместо индексов проставляются имена, которые также указываются в фигурных скобках

Дорогой {name} {surname}, баланс Вашего лицевого счёта составляет {balance} руб.
Во время вызова метода format нужно для каждого имени, которое используется в шаблонной строке, передать значение в 
следующем формате

шаблон.format(имя1=значение1, имя2=значени2, ... , имяN=значениеN)
Вот как это будет выглядеть на практике:

    name = 'Семён'
    surname = 'Семёнов'
    balance = 32.56

    text = """Дорогой {name} {surname}, 
    баланс Вашего лицевого счёта составляет {balance} руб.""".format(surname=surname,
                                                                    name=name,
                                                                    balance=balance)

    print(text)


Сопоставление будет происходить полностью по именам, порядок перечисления имен не имеет значения. Главное - передать значения всем именам, 
которые были заведены в шаблонной строке. Если забыть передать значение хотя бы одному имени, возникнет ошибка KeyError


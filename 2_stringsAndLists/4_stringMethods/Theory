                        Методы строк
В этом уроке мы впервые столкнемся с вами с таким термином как «метод». Познакомимся с первыми методами у строк и узнаем, 
как ими пользоваться.



                        Что такое метод?
Вообще понятие метода приходит к нам из объектно-ориентированного подхода программирования (ООП). 
Понимаю, что на данном этапе изучения вы не знакомы с ООП, 
поэтому постараемся простым языком разобраться с этой темой.
Метод представляет собой просто функцию, которая связана с определенным типом объекта и применяется к конкретному значению.

Чтобы воспользоваться методом, вы должны будете его вызвать. Синтаксис вызова метода выглядит следующим образом:
    объект.название_метода()
или
    объект.название_метода(аргументы)



                    Метод upper
Метод .upper  имеет следующий шаблон вызова:
        S.upper()
Данный метод возвращает новую строку из строки S, превращая все буквы в заглавные. Если в строке присутствуют знаки
пунктуации, специальные символы или цифры, то они останутся неизменными. В заглавные конвертируются только символы, 
являющиеся буквами.

Метод .upper можно вызвать от переменной, в которой хранится строка,

    a = 'Hello R2-D2'
    print(a.upper())  # HELLO R2-D2

    b = 'БолЬшаЯ сиЛА - бОЛЬшАя ОтВЕТСТВЕнность!'.upper()
    # в переменной b сохранился результат вызова метода .upper
    print(b)  # БОЛЬШАЯ СИЛА - БОЛЬШАЯ ОТВЕТСТВЕННОСТЬ!
    а можно вызвать сразу от строки, минуя переменную

    print('NotHinG'.upper())  # NOTHING



                Метод lower
Метод .lower  имеет следующий шаблон вызова:
    S.lower()
Метод .lower является противоположным методу .upper: он возвращает новую строку на основании S, превращая все буквенные
символы в строчные (нижний регистр). 
Если в строке присутствуют знаки пунктуации, специальные символы или цифры, то они останутся неизменными.
Вызывать метод можно от переменной, хранящей строку,
    a = 'Hello R2-D2'
    print(a.lower())  # hello r2-d2

    b = 'БолЬшаЯ сиЛА - бОЛЬшАя ОтВЕТСТВЕнность!'.lower()
    print(b)  # большая сила - большая ответственность!
или от строки напрямую
    print('NotHinG'.lower())  # nothing



                    Метод title
 Метод .title  имеет следующий шаблон вызова:
    S.title()
Метод .title возвращает новую строку, в которой каждое слово исходной строки начинается с буквы в верхнем регистре, 
а все остальные буквы в нижнем. Знаки пунктуации, специальные символы или цифры игнорируются.

Вызывать метод .title можно как от переменной
    text = 'Год за годом растут БОЛЬШИЕ города!'

    print(text.title())  # Год За Годом Растут Большие Города!
так и от строки напрямую
    print('кАкОй чУдесНый дЕнь'.title())  # Какой Чудесный День



                Метод capitalize
Метод .capitalize  имеет следующий шаблон вызова:

        S.capitalize()
Метод .capitalize возвращает новую строку, в которой только первый символ находится в верхнем регистре, а все 
остальные в нижнем. Знаки пунктуации, специальные символы или цифры игнорируются.

Вызывать метод .capitalize можно как от переменной
    text = 'Год за годом растут БОЛЬШИЕ города!'
    print(text.capitalize())  # Год за годом растут большие города!

    print('кАкОй чУдесНый дЕнь'.capitalize())  # Какой чудесный день
    так и от строки напрямую

    print('кАкОй чУдесНый дЕнь'.capitalize())  # Какой чудесный день


                Метод swapcase
Метод .swapcase  имеет следующий шаблон вызова:
    S.swapcase()
Метод .swapcase возвращает новую строку, в которой  все заглавные буквы преобразованы в строчные, строчные – в заглавные. 
Цифры и знаки пунктуации игнорируются.
    text = 'Год за годом растут БОЛЬШИЕ города!123'
    print(text.swapcase())  # гОД ЗА ГОДОМ РАСТУТ большие ГОРОДА!123
    print(text)  # Год за годом растут БОЛЬШИЕ города!123

    print('кАкОй чУдесНый дЕнь'.swapcase())  # КаКоЙ ЧуДЕСнЫЙ ДеНЬ



                Изменение строки при помощи метода
Сама строка после вызова метода не меняется, но, если вы хотите, чтобы в переменной оказалась новая измененная строка, 
то вы можете сохранить результат выполнения метода в эту переменную. Тогда старое значение, хранившееся до вызова метода, 
перезатрется новым результатом.
    s = 'Беги, Форест! Беги!'
    s.upper()  # вызов не меняет значение в переменной s
    print(s)  # Беги, Форест! Беги!

    s = s.upper()  # сохраняем новое значение в s
    print(s)  # БЕГИ, ФОРЕСТ! БЕГИ!

    s = s.lower()  # вновь меняем значение в s
    print(s)  # беги, форест! беги!



        Метод .count имеет следующий шаблон вызова:
            S.count(sub[, start[, end]])
Название данного метода переводится как «количество». С помощью метода count вы можете посчитать, 
сколько раз вам встретилась строка sub в строке S .


                    Метод find
Метод  .find является очень важным методом, который помогает найти позицию подстроки. Этот метод может быть 
запущен от разного количества аргументов. Всего имеется три способа вызвать метод .find, но во 
всех трех вариантах необходимо обязательно передать один аргумент - подстроку поиска. Без этого значения невозможно 
будет производить поиск.
Первый способ вызова имеет следующий формат
                    S.find(sub)
Метод .find возвращает индекс первого слева вхождения строки sub в строке S. Метод .find вернет значение -1, 
если подстрока sub не будет найдена.
Второй вариант вызова предполагает передачу аргумента, отвечающего за стартовую позицию начала поиска
                ​S.find(sub, start])
При таком варианте вызова метод .find возвращает индекс первого слева вхождения строки sub в строке S, начиная 
с позиции start.  Значение start тем самым ограничивает диапазон поиска
Третий вариант вызова предполагает передать еще один аргумент, позволяющий ограничить позицию окончания поиска. 
По умолчанию поиск осуществляется до конца строки, но это можно изменить. Формат вызова следующий:
                S.find(sub, start, end)



                Метод rfind
Метод  .rfind полностью аналогичен методу .find , только имеет одно отличие: буква r в названии метода обозначает 
слово «right», что можно перевести как «справа», и, следовательно, поиск подстроки при методе .rfind будет осуществляться 
с конца строки (с правой части).
В вызов метода .rfind нужно обязательно передать один обязательный аргумент sub - подстроку поиска
                S.rfind(sub)




                        Метод index
Метод .index также является прямым аналогом метода .find. Разница этих методов лишь в том, что метод .find вернет значение -1 
в случае, если подстрока не будет найдена, а метод .index аварийно завершит программу с ошибкой
    ValueError: substring not found
    Вот как эта ошибка выглядит в консоли
Вот примеры вызова метода .index с одним аргументом и успешным поиском
    s = 'hello world'
    print(s.index('h'))  # 0
    print(s.index('o'))  # 4
    print(s.index('ll'))  # 2
    print(s.index('hello'))  # 0
    print(s.index('world'))  # 6
А вот пример вызова, который завершится ошибкой ValueError
    s = 'hello world'
    print(s.index('t'))  # ValueError: substring not found


                    Метод Replace
С английского глагол «replace» переводится как «заменить». Поэтому все предназначение данного метода 
заключается в том, чтобы заменить одну подстроку на другую
В вызов метода .replace обязательно нужно передать два аргумента
                S.replace(old, new)
где old - это подстрока, которую мы будем менять, new - подстрока, на которую произойдет замена.
                spell = 'Абракадабра'
                print(spell.replace('а', 'o'))  # Абрoкoдoбрo
                print(spell)  # Абракадабра

Метод .replace заменяет каждую найденную подстроку old на new, ограничений по количеству замен нет. Но если
вы хотите все-таки сделать ограничение, то можно передать третье необязательное числовое значение
                S.replace(old, new, count)
которое ограничит число замен. Ниже представлен пример, в котором мы делаем только две замены
                spell = 'Абракадабра'
                print(spell.replace('а', 'o', 2))  # Абрoкoдаб

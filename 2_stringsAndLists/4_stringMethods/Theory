                        Методы строк
В этом уроке мы впервые столкнемся с вами с таким термином как «метод». Познакомимся с первыми методами у строк и узнаем, 
как ими пользоваться.



                        Что такое метод?
Вообще понятие метода приходит к нам из объектно-ориентированного подхода программирования (ООП). 
Понимаю, что на данном этапе изучения вы не знакомы с ООП, 
поэтому постараемся простым языком разобраться с этой темой.
Метод представляет собой просто функцию, которая связана с определенным типом объекта и применяется к конкретному значению.

Чтобы воспользоваться методом, вы должны будете его вызвать. Синтаксис вызова метода выглядит следующим образом:
    объект.название_метода()
или
    объект.название_метода(аргументы)



                    Метод upper
Метод .upper  имеет следующий шаблон вызова:
        S.upper()
Данный метод возвращает новую строку из строки S, превращая все буквы в заглавные. Если в строке присутствуют знаки
пунктуации, специальные символы или цифры, то они останутся неизменными. В заглавные конвертируются только символы, 
являющиеся буквами.

Метод .upper можно вызвать от переменной, в которой хранится строка,

    a = 'Hello R2-D2'
    print(a.upper())  # HELLO R2-D2

    b = 'БолЬшаЯ сиЛА - бОЛЬшАя ОтВЕТСТВЕнность!'.upper()
    # в переменной b сохранился результат вызова метода .upper
    print(b)  # БОЛЬШАЯ СИЛА - БОЛЬШАЯ ОТВЕТСТВЕННОСТЬ!
    а можно вызвать сразу от строки, минуя переменную

    print('NotHinG'.upper())  # NOTHING



                Метод lower
Метод .lower  имеет следующий шаблон вызова:
    S.lower()
Метод .lower является противоположным методу .upper: он возвращает новую строку на основании S, превращая все буквенные
символы в строчные (нижний регистр). 
Если в строке присутствуют знаки пунктуации, специальные символы или цифры, то они останутся неизменными.
Вызывать метод можно от переменной, хранящей строку,
    a = 'Hello R2-D2'
    print(a.lower())  # hello r2-d2

    b = 'БолЬшаЯ сиЛА - бОЛЬшАя ОтВЕТСТВЕнность!'.lower()
    print(b)  # большая сила - большая ответственность!
или от строки напрямую
    print('NotHinG'.lower())  # nothing



                    Метод title
 Метод .title  имеет следующий шаблон вызова:
    S.title()
Метод .title возвращает новую строку, в которой каждое слово исходной строки начинается с буквы в верхнем регистре, 
а все остальные буквы в нижнем. Знаки пунктуации, специальные символы или цифры игнорируются.

Вызывать метод .title можно как от переменной
    text = 'Год за годом растут БОЛЬШИЕ города!'

    print(text.title())  # Год За Годом Растут Большие Города!
так и от строки напрямую
    print('кАкОй чУдесНый дЕнь'.title())  # Какой Чудесный День



                Метод capitalize
Метод .capitalize  имеет следующий шаблон вызова:

        S.capitalize()
Метод .capitalize возвращает новую строку, в которой только первый символ находится в верхнем регистре, а все 
остальные в нижнем. Знаки пунктуации, специальные символы или цифры игнорируются.

Вызывать метод .capitalize можно как от переменной
    text = 'Год за годом растут БОЛЬШИЕ города!'
    print(text.capitalize())  # Год за годом растут большие города!

    print('кАкОй чУдесНый дЕнь'.capitalize())  # Какой чудесный день
    так и от строки напрямую

    print('кАкОй чУдесНый дЕнь'.capitalize())  # Какой чудесный день


                Метод swapcase
Метод .swapcase  имеет следующий шаблон вызова:
    S.swapcase()
Метод .swapcase возвращает новую строку, в которой  все заглавные буквы преобразованы в строчные, строчные – в заглавные. 
Цифры и знаки пунктуации игнорируются.
    text = 'Год за годом растут БОЛЬШИЕ города!123'
    print(text.swapcase())  # гОД ЗА ГОДОМ РАСТУТ большие ГОРОДА!123
    print(text)  # Год за годом растут БОЛЬШИЕ города!123

    print('кАкОй чУдесНый дЕнь'.swapcase())  # КаКоЙ ЧуДЕСнЫЙ ДеНЬ



                Изменение строки при помощи метода
Сама строка после вызова метода не меняется, но, если вы хотите, чтобы в переменной оказалась новая измененная строка, 
то вы можете сохранить результат выполнения метода в эту переменную. Тогда старое значение, хранившееся до вызова метода, 
перезатрется новым результатом.
    s = 'Беги, Форест! Беги!'
    s.upper()  # вызов не меняет значение в переменной s
    print(s)  # Беги, Форест! Беги!

    s = s.upper()  # сохраняем новое значение в s
    print(s)  # БЕГИ, ФОРЕСТ! БЕГИ!

    s = s.lower()  # вновь меняем значение в s
    print(s)  # беги, форест! беги!


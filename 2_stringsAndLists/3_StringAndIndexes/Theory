                                Индексы и срезы
В этом уроке мы с вами познакомимся с двумя новыми понятиями «Индекс» и «Срез». Знания, приобретенные в этом уроке, помогут вам не только при работе со строками, но и с другими упорядоченными коллекциями в python



                        Индекс
Сперва давайте вспомним определение строки:
        Строка - это неизменяемая упорядоченная последовательность символов, которая \
        используется для хранения текстовой информации.
В этом определении обратите внимание на слово «упорядоченная». Оно сообщает нам, что у каждого 
символа в строке есть свое место и, следовательно, свой порядковый номер. Вот здесь как раз возникает термин «индекс».
        Индекс (от английского слова «index») - это порядковый номер элемента в упорядоченной последовательности. Нумерация элементов в python начинается с нуля и далее идет по возрастанию.


Давайте разберем это на примере строки 'hello world', состоящей из 11 символов: два слова длиной по 5 
букв и пробел посередине в сумме дают 11 символов. У каждого символа в любой строке есть свой порядковый 
номер. Порядок нумерации в Python начинается с 0 от самого левого символа. Значит, самый левый символ h стоит 
на нулевом индексе, затем буква е - на первом и так далее по порядку.

Порядковый номер, он же индекс, может позволить нам получить значение, которое стоит на этом месте. Такая операция называется обращение по индексу и выполняется в следующем формате:
    строка[индекс]

Указывается объект строки, затем ставятся обязательно квадратные скобки, в которых указывается индекс. Если вы укажете существующий индекс, то в результате операции обращения по индексу вы получите символ строки, стоящий на 
указанном месте. Если указать неправильный индекс, возникнет исключение IndexError.

Последний индекс можно записать по следующей формуле
    строка[len(строка) - 1]

Отрицательные индексы
Помимо привычной нумерации с нуля, которая начинается с левой стороны строки, в python существует еще одна нумерация. Она стартует с правого края строки с индекса -1 и идет в сторону уменьшения. Значит, последняя буква имеет индекс -1, 
предпоследняя будет стоять на индексе -2 и т.д. Вот взгляните на картинку, где сразу изображены два типа нумерации для строки hello world:
    'hello world'
 -11   ...  -4 -3 -2 -1




                                                    Срезы
С индексами мы разобрались, теперь давайте обсудим, что такое срезы. 
Срез (от английского слова «slice») - это удобный и мощный инструмент, который позволяет извлекать за раз не один 
символ из строки, а сразу несколько. При этом исходная строка не меняет своего состояния.

 
Операция получения среза выполняется также при помощи квадратных скобок [] , в которых указываются два значения, разделенные двоеточием :. Вот как выглядит синтаксис взятия среза:
    строка[начало_среза:конец_среза]
    Здесь в записи используются два обозначения:

    ➖ начало_среза - это индекс позиции (включительно), начиная с которой нужно брать срез;
    ➖ конец_среза - это индекс позиции (не включительно), на которой необходимо закончить взятие среза.

К примеру, мы хотим из строки hello world взять подстроку llo w  (на картинке ниже эти символы выделены красным цветом).


Тогда нам нужно определить индексы начала и конца данной подстроки, эти значения и будут являться стартом и окончанием для среза. Начинаем со второго индекса и берем все элементы по шестой индекс включительно. Казалось бы, что тогда нам нужно написать так
    s = 'hello world'
    print(s[2:6])

    >> 'llo '

Допустимо использовать в срезах и отрицательные индексы. Причем срез может состоять как только из отрицательных индексов s[-5:-2]
    'wor'

так и из совокупности положительных и отрицательных индексов s[-5:9]
    'wor'


                    В любом из этих вариантов действует одна и таже логика: 
берутся все символы с начальной позиции включительно и по конечную позицию исключительно.



                        Пустые параметры начала и конец среза 
Во всех примерах  взятия среза мы передавали два значения: начало и конец. 
Но вы можете не указывать значения для любого из этих параметров.
Если оставить пустым конец, то будет взят срез с индекса начала и до конца строки. 
Значит, если мы с вами напишем вот таким образом s[4:] , то тем самым возьмутся все символы, начиная с 4го 
индекса и по самый конец строки:
    'o world'

Если оставить пустым начало, то будет взят срез с начала строки и по индекс конца среза не включительно. Следовательно, 
запись s[:4] возьмет все символы с начала строки и по 4й индекс не включительно:
    'hell'



Не путайте! Когда вы пишете просто s[4], то вы обращаетесь по индексу 4го элемента и, тем самым, получаете только одно 
значение, стоящее под 4-ым индексом. А чтобы взять срез вы должны будете обязательно поставить двоеточие s[:4]  или  s[4:]


опускается не указывать оба параметра, в таком случае будет взят срез от начала до конца самой строки. Такую операцию можно назвать копированием строки.
 

Следовательно, если вы напишите s[:] , то в результате получите такую же строку:
    'hello world'


                            Шаг среза
Также операция взятия среза допускает использование третьего необязательного параметра, 
отвечающего за шаг среза. Вот как выглядит полный синтаксис операции взятия среза:
            строка[начало_среза:конец_среза:шаг]


Параметр шаг влияет на расстояние между выбираемыми объектами в срезе. По умолчанию шаг равен единице, поэтому запись
    s[6:9]
тождественна записи
    s[6:9:1]

Но значение шага можно поменять, чтобы брать элементы, расположенные на определенном интервале друг от друга. 
Например, мы хотим взять все буквы стоящие через одну с начала строки

Это можно сделать следующим образом: мы берем всю строку от начала до конца и берем каждый второй элемент в наш срез. 
Значит, в данном случае шаг будет равен двум, и наша итоговая инструкция будет выглядеть так s[::2]
    'hlowrd'

сли вы хотите взять все остальные буквы, то в данном случае вы должны будете начинать с буквы e , то есть с первого индекса, 
и брать также элементы через 1 (шаг равен 2). Тогда возьмутся элементы, стоящие на позициях 1, 3, 5, 7 и 9:
    s[1::2]
    'el ol'

Например, запись s[2:8:3] означает, что нужно взять каждый третий символ, начиная со второго индекса и до 
восьмого не включительно. Вот какой результат у нас получится:
    'l '

Помните, что мы получили, когда использовали срез s[6:2]? Все верно, пустую строку. Поскольку по умолчанию используется шаг 
равный единице и из-за этого мы не можем пройти от 6-го индекса ко 2-ому. Положительный шаг позволяет идти по индексам в сторону их возрастания, 
а в данной ситуации нам нужно идти в обратную сторону. И такое при срезах тоже возможно. Вы можете указать отрицательный шаг. Взгляните на результат 
    s[6:2:-1]
    'w ol'

Запись вида
    s[::-1]

возьмет каждый элемент строки, двигаясь в обратном направлении. В результате такой операции мы получим перевернутую строку
    'dlrow olleh'




                            Неизменяемость строки
Строка представляет собой коллекцию, состоящую из нескольких элементов, а именно - символов. 
Далее в этом курсе мы познакомимся с другими коллекциями, которые могут хранить не только символы, н
о и целые строки, числа и другие типы данных. Главное для нас на данный момент узнать, что все коллекции 
можно разделить на два типа:
   ✔️ изменяемые;
   ✔️ неизменяемые.
Строки относятся к неизменяемым коллекциям. Это означает, что получить доступ к конкретному элементу строки 
можно по индексу, а вот изменить данный символ в уже готовой строке не получится. Если вы попытаетесь присвоить 
новое значение по индексу, то вы получите исключение

TypeError: 'str' object does not support item assignment
которое дословно переводится как «объект строка не поддерживает изменение».

Из этого можно сделать такую программу
    s = 'hello world'
    new_s = s[:4] + 'a' + s[5:]
    print(new_s)

Таким образом, вы получите новую строку, но при этом мы видим, что наша прошлая строка не изменилась.
Если вам необходимо, чтобы изменения произошли сразу в переменой s , вы можете отказаться от использования 
переменной new_s и полученное значение сразу сохранить в s.
    s = s[:4] + 'a' + s[5:]
    #'hella world'
    s = s[:4] + 'o' + s[5:]
     #'hello world'


Что увидим на экране после запуска следующего кода?
    s = 'qwerty123'
    s[2] = 'a'
    print(s)

    Будет ошибка TypeError: 'str' object does not support item assignment


Что увидим на экране после запуска следующего кода?
    s = 'qwerty123'
    print(s[5:2])
    
    Пустая строка

Что увидим на экране после запуска следующего кода?
    s = 'qwerty123'
    print(s[6:54])

    123
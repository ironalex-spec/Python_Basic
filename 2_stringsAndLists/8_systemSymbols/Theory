В этом уроке у нас речь пойдёт об экранированных символах или, как их ещё по-другому называют, служебные символы.

Чтобы увидеть свой первый служебный символ вам необходимо создать многостраничную строку. Мы её будем хранить в переменной 
s и здесь в начале необходимо указать три открывающих кавычки. Внутри мы можем с вами записать обычную строку и при этом 
ещё переходить на новую строчку. Не забудьте указать в конце три закрывающие кавычки. Теперь мы можем увидеть её содержимое. 
Обратите внимание на 
    \n - он является служебным и обозначает перенос строки.

Давайте посмотрим какова длина нашей строки.
    a = "abc\ndef"
    print(a)    #abc
                #def
    print(len(a)) #7
Отсюда мы делаем вывод, что наш служебный символ python воспринимает как один.

Кроме \n есть еще и другие служебные символы.
    \newline - продолжение на новой строке
    \\ - символ обратного слеша(остается тольько 1)
    \' - символ апостроф
    \" - символ кавычка
    \a - звонок
    \b - забой
    \f - перевод формата
    \r - возврат каретки
    \t - табуляция гориз
    \v - вертикальная табуляция


Все служебные символы у нас начинаются на знак обратного слэша и всегда когда python увидит в строке \, то он начинает искать соответствие по служебному символу и отсюда существует правило, что никакую строку нельзя заканчивать обратным слешем.
 Если запустить код ниже, то это вызовет ошибку. 
Это происходит потому что Python попытается преобразовать экранированную обратную кавычку.
    a = "abc\tdef\"
    print(a)

    out
    SyntaxError


Будьте аккуратны. В дальнейшем нам с вами понадобится работать с файлами. Для того чтобы открыть файл нужно указать его путь. 
Типичный путь какой-либо папки содержит символы обратного слеша и как мы уже знаем это знак экранирования. Если вдруг у 
нас после него будет стоять какой-либо символ который в сочетании с обратным слешем образует сочетание служебных символов, то наш путь изменится. 
Если мы выведем путь с помощью команды print, то он уже будет отображать его в том виде, в котором её видит Python, то есть он уже воспринимает эти символы как служебные.


Также существует ещё один способ это сделать. Если вы поставите букву 
    r 
перед началом строки, то она автоматически будет убирать все служебные символы в этой строке.


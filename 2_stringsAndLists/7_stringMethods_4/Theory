            Метод strip
Метод .strip  имеет следующий шаблон вызова:
    S.strip([chars])
Метод  .strip возвращает копию строки, удаляя как начальные, так и конечные символы (в зависимости от переданного строкового аргумента). 
Метод удаляет символы как слева, так и справа в зависимости от аргумента chars . Если аргумент chars не передан, 
то по умолчанию удаляться пробелы и символы переноса на новую строку \n.

    q = '   hello   '
    print(q)
    print(q.strip())
    print('\n\n\n_USB_\n\n\n\n'.strip())
    print('123_USB_123'.strip('123'))

    out
       hello   
    hello
    _USB_
    _USB_

Символы в параметре chars рассматриваются не как последовательность, а как набор символов, которые необходимо удалить:
    print('321232321_USB_31121312'.strip('123'))

    out
    _USB_


                    Метод rstrip
Метод .rstrip  имеет следующий шаблон вызова:
    S.rstrip([chars])
Метод  .rstrip возвращает копию строки, в которой справа удалены указанные символы 
(по умолчанию удаляются пробельные символы).
    q = '   hello   '
    print(q)
    print(q.rstrip())
    print('\n\n\n_USB_\n\n\n\n'.rstrip())
    print('123_USB_123'.rstrip('123'))
    print('321232321_USB_31121312'.rstrip('123'))

    out 
       hello   
    hello



    _USB_
    123_USB_
    321232321_USB_

    Метод lstrip
Метод .lstrip  имеет следующий шаблон вызова:
    S.lstrip([chars])
Метод  .lstrip возвращает копию строки, в которой слева удалены указанные символы 
(по умолчанию удаляются пробельные символы).
    q = '   hello   '
    print(q)
    print(q.lstrip())
    print('\n\n\n_USB_\n\n\n\n'.lstrip())
    print('123_USB_123'.lstrip('123'))
    print('321232321_USB_31121312'.lstrip('123'))

       hello   
    hello   
    _USB_




    _USB_123
    _USB_31121312



                Метод partition
Метод .partition  имеет следующий шаблон вызова:
    S.partition(sep)
Метод  .partition разбивает строку по указанному разделителю и возвращает кортеж из трех элементов: 
строка до разделителя, сам разделитель и строка после разделителя. Если разделитель не найден, то возвращается 
кортеж так же состоящий из трех элементов в котором первый элемент – это исходная строка S, а два других элемента 
– это пустые строки.

    text = "Python is best"
    print(text.partition('is '))
    print(text.partition('not '))
    s = "Python is best, isn't it"
    print(s.partition('is'))

    out
    ('Python ', 'is ', 'best')
    ('Python is best', '', '')
    ('Python ', 'is', " best, isn't it")


                Метод rpartition
Метод .rpartition  имеет следующий шаблон вызова:
    S.rpartition(sep)
Метод  .rpartition разбивает строку по последнему встреченному разделителю sep и возвращает кортеж, который состоит 
из трех элементов: строки до разделителя, самого разделителя и строки после разделителя. Если разделитель в строке 
отсутствует, то кортеж будет состоять из: двух пустых строк и исходной строки:
    text = "Python is best"

    print(text.rpartition('is '))
    print(text.rpartition('not '))

    s = "Python is best, isn't it"

    print(s.rpartition('is'))

    out
    ('Python ', 'is ', 'best')
    ('', '', 'Python is best')
    ('Python is best, ', 'is', "n't it")
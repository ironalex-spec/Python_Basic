                                Вывод переменных 
Мы знаем теперь как при помощи f-строки вывести имя переменной и ее значение. Вот можете полюбоваться примером ниже:
            x = 14
            y = 17
            print(f"x = {x}, y = {y}")


Но начиная с версии Python 3.8 функционал f-строк был дополнен новой возможностью по выводу имён переменных и их значений. 
Посмотрите как теперь это можно сделать:
            x = 11
            y = 98
            print(f"{x=}, {y=}") #x=11, y=98
            #пробелы будут учтены
            print(f"{x  =}, {y= }") #x  =11, y= 98


                            Формат вывода дробной части числа
Встречаются задачи, где нужно вывести только определенное количество знаков после запятой. Допустим, мы хотим вывести ровно 
три знака после запятой для любого числа. Но далеко не у всех чисел в представлении есть эти три знака после запятой. У
некоторых чисел они есть, у других либо не хватает знаков, либо имеется больше чем хотелось бы
Ответ простой - форматировать. F-строки поддерживают функционал форматирования. Мы указываем специальным образом после имени 
переменной сколько символов ожидаем увидеть.
Запись c:.3f говорит, что  переменную c нужно представить в вещественном виде (это знак f) и отобразить три символа после
 запятой. Если у переменной c не хватает символов для трех знаков, проставятся нули. Если символов в избытке, произойдет 
 округление до третьего символа после запятой.

Над целыми числами тоже можно так издеваться)
    d = 100
    print(f'{d:.1f}') #100.0
    print(f'{d:.2f}')   #100.00
    print(f'{d:.3f}')   #100.000


                        Формат вывода целых чисел
При помощи f-строк мы можем влиять и на отображение целых чисел.
        n = 12345
        print(f'{n:8d}') #   12345
        print(f'{n:7d}') #  12345
        print(f'{n:6d}')
        print(f'{n:5d}') #12345
        print(f'{n:4d}') #12345

Можно вместо пробелов добавить незначащие нули, для этого нужно подписать 0 перед количеством разрядов
        n = 12345
        print(f'{n:08d}') #00012345
        print(f'{n:07d}') #0012345
        print(f'{n:06d}') #012345  
        print(f'{n:05d}')   
        print(f'{n:04d}')

Можно также влиять на знак разделителя между группами чисел, посмотрите пример ниже
        n = 12345678912345

        print(f'{n:,d}') #12,345,678,912,345
        print(f'{n:_d}') #12_345_678_912_345

        sep = '_'
        print(f'{n:{sep}d}') # вложенная f-строка


Если вы попытаетесь указать другие знаки разделителя вместо знаков , и _ , получите ошибку
Также нельзя совмещать указание разделителя с указанием количества разрядов. Вот смотрите
        n = 12345678912345

        print(f'{n:,15d}')

        out
        Traceback (most recent call last):
        File "/tmp/sessions/7fea4fc986f7d737/main.py", line 3, in <module>
            print(f'{n:,15d}')
        ValueError: Invalid format specifier


                        Где это может быть полезно?
Это пригодится там, где нужно красиво и ровно вывести информацию. В примере ниже будет использована еще не 
изученная вами тема: цикл for. Не бойтесь, мы пройдем ее подробно чуть позже, сейчас вам нужно лишь поверхностное 
понимание того, что здесь происходит. Наша программа печатает для каждого числа от 1 до 10 значения его квадрата и куба. 
Смотрите как все это получается без выравнивания
        print(f'Число\t\tКвадрат\t\tКуб')
        for x in range(1, 11):
            print(f'{x:2d}\t\t{x*x:3d}\t\t{x*x*x:4d}')

        out
        Число		Квадрат		Куб
        1		    1		   1
        2		    4		   8
        3		    9		  27
        4		    16		  64
        5		    25		 125
        6		    36		 216
        7		    49		 343
        8		    64		 512
        9		    81		 729
        10		    100		1000


                                    Выравнивание
Существует несколько способов выравнивания переменных в f-строках. Различные варианты выравнивания следует:
Символ	Значение
    <	Выравнивает выражение в фигурных скобках по левому краю. У строк такое поведение по умолчанию
    >	Выравнивает выражение в фигурных скобках по правому краю. У чисел такое поведение по умолчанию
    ^	Выравнивает выражение в фигурных скобках по центру


    number = 12345.6789
    print(f"Число {number = }")
    print(f"|{number:25}|")
    print(f"|{number:<25}|")
    print(f"|{number:>25}|")
    print(f"|{number:^25}|")
    print('-'*25)
    text = "Python 3.10"
    print(f"Строка {text = }")
    print(f"|{text:25}|")
    print(f"|{text:<25}|")
    print(f"|{text:>25}|")
    print(f"|{text:^25}|")

    out
    Число number = 12345.6789
    |               12345.6789|
    |12345.6789               |
    |               12345.6789|
    |       12345.6789        |
    -------------------------
    Строка text = 'Python 3.10'
    |Python 3.10              |
    |Python 3.10              |
    |              Python 3.10|
    |       Python 3.10       |


Символы "|" используются в f-строке, чтобы помочь очертить интервал. Число после «:» указывает на количество символов в ширину.
По умолчанию символом заполнителем является пробел, но можно его заменить на другое значение
    number = 12345.6789
    print(f"Число {number = }")
    print(f"|{number:=<25}|")
    print(f"|{number:=>25}|")
    print(f"|{number:=^25}|")
    print('-'*25)
    text = "Python 3.10"
    print(f"Строка {text = }")
    print(f"|{text:-<25}|")
    print(f"|{text:!>25}|")
    print(f"|{text:?^25}|")


    Число number = 12345.6789
    |12345.6789===============|
    |===============12345.6789|
    |=======12345.6789========|
    -------------------------
    Строка text = 'Python 3.10'
    |Python 3.10--------------|
    |!!!!!!!!!!!!!!Python 3.10|
    |???????Python 3.10???????|